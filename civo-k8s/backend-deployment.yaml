apiVersion: apps/v1
kind: Deployment
metadata:
  name: word-filter-backend
  namespace: word-filter-app
  labels:
    app: word-filter-backend
    component: api
    cloud-provider: civo
    version: objectstore
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: word-filter-backend
  template:
    metadata:
      labels:
        app: word-filter-backend
        component: api
        cloud-provider: civo
        version: objectstore
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: backend
        image: phanivikranth/word-filter-backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8001
          name: http
          protocol: TCP
        
        # Environment variables for Civo Object Store
        env:
        - name: PORT
          value: "8001"
        - name: HOST
          value: "0.0.0.0"
        
        # Civo Object Store Configuration
        - name: WORDS_S3_BUCKET
          valueFrom:
            configMapKeyRef:
              name: word-filter-config
              key: WORDS_S3_BUCKET
        - name: WORDS_S3_KEY
          valueFrom:
            configMapKeyRef:
              name: word-filter-config
              key: WORDS_S3_KEY
        - name: S3_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: word-filter-config
              key: S3_ENDPOINT
        - name: S3_REGION
          valueFrom:
            configMapKeyRef:
              name: word-filter-config
              key: S3_REGION
        
        # Civo Object Store Credentials
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: word-filter-civo-credentials
              key: ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: word-filter-civo-credentials
              key: SECRET_ACCESS_KEY
        
        # Application Configuration
        - name: CORS_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: word-filter-config
              key: CORS_ORIGINS
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: word-filter-config
              key: LOG_LEVEL
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: word-filter-config
              key: ENVIRONMENT
        
        # Oxford Dictionary API (optional)
        - name: OXFORD_APP_ID
          valueFrom:
            secretKeyRef:
              name: word-filter-oxford-credentials
              key: OXFORD_APP_ID
              optional: true
        - name: OXFORD_APP_KEY
          valueFrom:
            secretKeyRef:
              name: word-filter-oxford-credentials
              key: OXFORD_APP_KEY
              optional: true
        
        # Resource limits optimized for Civo
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        # Startup probe for object store initialization
        startupProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 12  # Allow 2 minutes for startup
        
        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: false  # May need write access for temp files
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        
        # Volume mounts (if needed)
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
      
      # Service account for security
      serviceAccountName: word-filter-backend
      
      # Security context for pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      
      # Restart policy
      restartPolicy: Always
      
      # Node selection (prefer medium/large nodes)
      nodeSelector:
        kubernetes.io/arch: amd64
      
      # Pod anti-affinity for better distribution
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - word-filter-backend
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: word-filter-backend
  namespace: word-filter-app
  labels:
    app: word-filter-backend
    component: api
    cloud-provider: civo
  annotations:
    service.beta.kubernetes.io/civo-load-balancer-protocol: "http"
    service.beta.kubernetes.io/civo-load-balancer-algorithm: "round_robin"
spec:
  type: LoadBalancer  # Civo supports LoadBalancer services
  ports:
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: http
  selector:
    app: word-filter-backend
  sessionAffinity: None

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: word-filter-backend
  namespace: word-filter-app
  labels:
    app: word-filter-backend
    cloud-provider: civo
automountServiceAccountToken: true
