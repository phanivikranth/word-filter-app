name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # Backend Testing Job
  backend-test:
    runs-on: ubuntu-latest
    name: Backend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Create test words file
      run: |
        cd backend
        echo -e "apple\nbanana\ncherry\ndate\nelderberry" > words.txt
        
    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ -v --tb=short --cov=. --cov-report=xml --cov-report=term --maxfail=5
        
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        
  # Frontend Testing Job
  frontend-test:
    runs-on: ubuntu-latest
    name: Frontend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run frontend linting
      run: |
        cd frontend
        npm run ng lint
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage --progress=false
        
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        
  # Build Jobs
  build:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    name: Build Applications
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    # Backend Build
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Build backend
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Validate that the app can start
        timeout 10 python main.py || echo "Backend validation complete"
        
    # Frontend Build  
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend for production
      run: |
        cd frontend
        npm run build --prod
        
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-dist
        path: frontend/dist/
        retention-days: 30
        
  # Docker Build Job
  docker-build:
    needs: [build]
    runs-on: ubuntu-latest
    name: Build Docker Images
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && secrets.DOCKER_USERNAME != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
      if: github.event_name != 'pull_request' && secrets.DOCKER_USERNAME != '' && secrets.DOCKER_TOKEN != ''
      
    - name: Extract metadata
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/word-filter-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Extract frontend metadata
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/word-filter-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  # Integration Tests
  integration-test:
    needs: [build]
    runs-on: ubuntu-latest
    name: Integration Tests
    
    services:
      backend:
        image: python:3.12-slim
        options: --health-cmd "curl -f http://localhost:8001/health || exit 1" --health-interval 30s --health-timeout 10s --health-retries 3
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies and start backend
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo -e "apple\nbanana\ncherry\ndate\nelderberry" > words.txt
        python main.py &
        sleep 10
        
    - name: Test backend health
      run: |
        curl -f http://localhost:8001/ || exit 1
        curl -f http://localhost:8001/words/stats || exit 1
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run integration tests
      run: |
        cd frontend
        npm run test -- --watch=false --browsers=ChromeHeadless src/app/integration/
        
  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
  # Multi-Cloud Deployment Job (only on main branch)
  deploy:
    needs: [backend-test, frontend-test, build, integration-test]
    runs-on: ubuntu-latest
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    strategy:
      matrix:
        cloud_provider: [aws, civo]
        include:
          - cloud_provider: aws
            terraform_dir: terraform
            k8s_dir: k8s
            region_var: AWS_DEFAULT_REGION
            region_default: us-west-2
          - cloud_provider: civo
            terraform_dir: civo-terraform
            k8s_dir: civo-k8s
            region_var: CIVO_REGION
            region_default: LON1
      fail-fast: false  # Continue with other providers if one fails
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup cloud provider tools
      run: |
        case "${{ matrix.cloud_provider }}" in
          aws)
            # Install AWS CLI if not present
            if ! command -v aws &> /dev/null; then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
            fi
            
            # Configure AWS credentials
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region ${{ env[matrix.region_var] || matrix.region_default }}
            ;;
            
          civo)
            # Install Civo CLI
            curl -sL https://github.com/civo/cli/releases/download/v1.0.0/civo-1.0.0-linux-amd64.tar.gz | tar xz
            sudo mv civo /usr/local/bin/
            
            # Configure Civo CLI
            civo apikey save github-actions ${{ secrets.CIVO_API_KEY }}
            ;;
        esac
        
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Check if cloud deployment is enabled
      id: check_enabled
      run: |
        case "${{ matrix.cloud_provider }}" in
          aws)
            if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ] && [ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
              echo "enabled=true" >> $GITHUB_OUTPUT
            else
              echo "enabled=false" >> $GITHUB_OUTPUT
              echo "⚠️ AWS credentials not configured, skipping AWS deployment"
            fi
            ;;
          civo)
            if [ -n "${{ secrets.CIVO_API_KEY }}" ]; then
              echo "enabled=true" >> $GITHUB_OUTPUT
            else
              echo "enabled=false" >> $GITHUB_OUTPUT
              echo "⚠️ Civo API key not configured, skipping Civo deployment"
            fi
            ;;
        esac
        
    - name: Deploy infrastructure
      if: steps.check_enabled.outputs.enabled == 'true'
      run: |
        cd ${{ matrix.terraform_dir }}
        
        # Initialize Terraform
        terraform init
        
        # Plan deployment
        terraform plan \
          -var "cluster_name=word-filter-${{ matrix.cloud_provider }}-prod" \
          -var "environment=production" \
          -out=tfplan
          
        # Apply if auto-deployment is enabled
        if [ "${{ secrets.AUTO_DEPLOY }}" = "true" ]; then
          terraform apply -auto-approve tfplan
          
          # Save kubeconfig
          terraform output -raw kubeconfig > ../kubeconfig-${{ matrix.cloud_provider }}.yaml
        else
          echo "Auto-deployment disabled. Manual approval required."
        fi
        
    - name: Deploy application
      if: steps.check_enabled.outputs.enabled == 'true' && secrets.AUTO_DEPLOY == 'true'
      run: |
        # Configure kubectl
        export KUBECONFIG=kubeconfig-${{ matrix.cloud_provider }}.yaml
        
        # Wait for cluster to be ready
        timeout 300 bash -c 'until kubectl get nodes | grep Ready; do sleep 10; done'
        
        # Deploy application
        kubectl apply -f ${{ matrix.k8s_dir }}/
        
        # Wait for deployments
        kubectl wait --for=condition=ready pod -l app=word-filter-backend -n word-filter-app --timeout=300s || true
        kubectl wait --for=condition=ready pod -l app=word-filter-frontend -n word-filter-app --timeout=300s || true
        
        # Get service status
        echo "=== ${{ matrix.cloud_provider }} Deployment Status ==="
        kubectl get pods -n word-filter-app
        kubectl get services -n word-filter-app
        
    - name: Run health checks
      if: steps.check_enabled.outputs.enabled == 'true' && secrets.AUTO_DEPLOY == 'true'
      run: |
        export KUBECONFIG=kubeconfig-${{ matrix.cloud_provider }}.yaml
        
        # Get backend service endpoint
        BACKEND_ENDPOINT=""
        
        case "${{ matrix.cloud_provider }}" in
          aws)
            BACKEND_ENDPOINT=$(kubectl get service word-filter-backend -n word-filter-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            ;;
          civo)
            BACKEND_ENDPOINT=$(kubectl get service word-filter-backend -n word-filter-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ;;
        esac
        
        if [ -n "$BACKEND_ENDPOINT" ] && [ "$BACKEND_ENDPOINT" != "null" ]; then
          echo "Testing backend at http://$BACKEND_ENDPOINT:8001"
          timeout 60 bash -c "until curl -f http://$BACKEND_ENDPOINT:8001/health; do sleep 10; done"
          echo "✅ ${{ matrix.cloud_provider }} deployment health check passed"
        else
          echo "⚠️ ${{ matrix.cloud_provider }} backend endpoint not available yet"
        fi
        
    - name: Upload deployment artifacts
      if: steps.check_enabled.outputs.enabled == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: deployment-${{ matrix.cloud_provider }}
        path: |
          kubeconfig-${{ matrix.cloud_provider }}.yaml
          ${{ matrix.terraform_dir }}/*.tfstate*
        retention-days: 30
        
  # Post-deployment summary
  deployment-summary:
    needs: deploy
    runs-on: ubuntu-latest
    name: Deployment Summary
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Create deployment summary
      run: |
        echo "# 🚀 Multi-Cloud Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Results:**" >> $GITHUB_STEP_SUMMARY
        
        # Check AWS deployment
        if [ "${{ needs.deploy.outputs.aws_status }}" ]; then
          echo "- AWS: ${{ needs.deploy.outputs.aws_status }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check Civo deployment
        if [ "${{ needs.deploy.outputs.civo_status }}" ]; then
          echo "- Civo: ${{ needs.deploy.outputs.civo_status }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Docker Images:**" >> $GITHUB_STEP_SUMMARY
        echo "- Backend: ${{ secrets.DOCKER_USERNAME }}/word-filter-backend:latest" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend: ${{ secrets.DOCKER_USERNAME }}/word-filter-frontend:latest" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Access Information:**" >> $GITHUB_STEP_SUMMARY
        echo "- Check deployment artifacts for kubeconfig files" >> $GITHUB_STEP_SUMMARY
        echo "- Use kubectl with appropriate kubeconfig to check service endpoints" >> $GITHUB_STEP_SUMMARY
