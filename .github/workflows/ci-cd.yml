name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # Backend Testing Job
  backend-test:
    runs-on: ubuntu-latest
    name: Backend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Create test words file
      run: |
        cd backend
        echo -e "apple\nbanana\ncherry\ndate\nelderberry" > words.txt
        
    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ -v --tb=short --cov=. --cov-report=xml --cov-report=term
        
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        
  # Frontend Testing Job
  frontend-test:
    runs-on: ubuntu-latest
    name: Frontend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run frontend linting
      run: |
        cd frontend
        npm run ng lint
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
        
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        
  # Build Jobs
  build:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    name: Build Applications
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    # Backend Build
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Build backend
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Validate that the app can start
        timeout 10 python main.py || echo "Backend validation complete"
        
    # Frontend Build  
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend for production
      run: |
        cd frontend
        npm run build --prod
        
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-dist
        path: frontend/dist/
        retention-days: 30
        
  # Docker Build Job
  docker-build:
    needs: [build]
    runs-on: ubuntu-latest
    name: Build Docker Images
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
      if: github.event_name != 'pull_request'
      
    - name: Extract metadata
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/word-filter-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Extract frontend metadata
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/word-filter-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  # Integration Tests
  integration-test:
    needs: [build]
    runs-on: ubuntu-latest
    name: Integration Tests
    
    services:
      backend:
        image: python:3.12-slim
        options: --health-cmd "curl -f http://localhost:8001/health || exit 1" --health-interval 30s --health-timeout 10s --health-retries 3
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies and start backend
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo -e "apple\nbanana\ncherry\ndate\nelderberry" > words.txt
        python main.py &
        sleep 10
        
    - name: Test backend health
      run: |
        curl -f http://localhost:8001/ || exit 1
        curl -f http://localhost:8001/words/stats || exit 1
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run integration tests
      run: |
        cd frontend
        npm run test -- --watch=false --browsers=ChromeHeadless src/app/integration/
        
  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
  # Deployment Job (only on main branch)
  deploy:
    needs: [backend-test, frontend-test, build, docker-build, integration-test]
    runs-on: ubuntu-latest
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production..."
        echo "Backend image: ${{ secrets.DOCKER_USERNAME }}/word-filter-backend:latest"
        echo "Frontend image: ${{ secrets.DOCKER_USERNAME }}/word-filter-frontend:latest"
        # Add your deployment logic here
        # For example: kubectl apply -f k8s/
        # Or: docker-compose up -d
        # Or: trigger deployment webhook
        
    - name: Post deployment notification
      run: |
        echo "âœ… Deployment completed successfully!"
        echo "Backend API: https://api.your-domain.com"
        echo "Frontend App: https://app.your-domain.com"
